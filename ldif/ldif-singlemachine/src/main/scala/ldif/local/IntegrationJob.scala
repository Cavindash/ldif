package ldif.local

import config.IntegrationConfig
import datasources.dump.DumpExecutor
import java.util.logging.Logger
import runtime._
import impl._
import ldif.datasources.dump.{DumpConfig, DumpModule}
import de.fuberlin.wiwiss.r2r.{FileOrURISource, Repository}
import ldif.modules.r2r.local.R2RLocalExecutor
import ldif.modules.r2r.{R2RModule, R2RConfig}
import util.StringPool
import ldif.modules.silk.SilkModule
import ldif.modules.silk.local.SilkLocalExecutor
import ldif.entity.EntityDescription
import de.fuberlin.wiwiss.ldif.{EntityBuilderModule, EntityBuilderConfig}
import de.fuberlin.wiwiss.ldif.local.EntityBuilderExecutor
import java.io.{BufferedWriter, FileWriter, File}
import ldif.util.{FatalErrorListener, Consts, StopWatch}
import java.util.{Calendar, Properties}

class IntegrationJob (val config : IntegrationConfig, debugMode : Boolean = false) {
  val log = Logger.getLogger(getClass.getName)

  // Object to store all kinds of configuration data
  private var configParameters: ConfigParameters = null
  val stopWatch = new StopWatch

  var lastUpdate : Calendar = null

  def runIntegration {
    synchronized {
      log.info("Running integration")

      stopWatch.getTimeSpanInSeconds

      // Validate configuration
      val fail = ConfigValidator.validateConfiguration(config)
      if(fail) {
        println("!- Validation phase failed")
        sys.exit(1)
      } else {
        println("-- Validation phase succeeded in " + stopWatch.getTimeSpanInSeconds + "s")
      }

      // Quads that are not used in the integration flow, but should still be output
      val otherQuadsFile = File.createTempFile("ldif-other-quads", ".bin")
      // Quads that contain external sameAs links
      val sameAsQuadsFile = File.createTempFile("ldif-sameas-quads", ".bin")

      setupConfigParameters(otherQuadsFile, sameAsQuadsFile)

      // Execute mapping phase
      val quadReaders = loadDump(config.sources)
      var r2rReader: QuadReader = executeMappingPhase(config, quadReaders)
      if(debugMode==true)
        r2rReader = writeDebugOutput("r2r", config.outputFile, r2rReader)

      // Execute linking phase
      var linkReader: QuadReader = executeLinkingPhase(config, r2rReader)
      if(debugMode==true)
        linkReader = writeDebugOutput("silk", config.outputFile, linkReader)

      configParameters.otherQuadsWriter.finish
      val otherQuadsReader = new FileQuadReader(otherQuadsFile)
      configParameters.sameAsWriter.finish
      val sameAsReader = new FileQuadReader(sameAsQuadsFile)

      val clonedR2rReader = setupQuadReader(r2rReader)

      val allQuads = new MultiQuadReader(clonedR2rReader, otherQuadsReader)
      val allSameAsLinks = new MultiQuadReader(linkReader, sameAsReader)

      var integratedReader: QuadReader = allQuads

      if(config.properties.getProperty("rewriteURIs", "true").toLowerCase=="true")
        integratedReader = executeURITranslation(allQuads, allSameAsLinks, config.properties)

      lastUpdate = Calendar.getInstance

      writeOutput(config, integratedReader)
    }
  }


  private def setupQuadReader(_clonedR2rReader: QuadReader): QuadReader = {
    var clonedR2rReader: QuadReader = _clonedR2rReader
    if (clonedR2rReader.isInstanceOf[FileQuadReader]) {
      clonedR2rReader.asInstanceOf[FileQuadReader].close()
      clonedR2rReader = new FileQuadReader(clonedR2rReader.asInstanceOf[FileQuadReader].inputFile)
    }
    clonedR2rReader
  }

  // Setup config parameters
  def setupConfigParameters(outputFile: File, sameasFile: File) {
    var otherQuads: QuadWriter = new FileQuadWriter(outputFile)
    var sameAsQuads: QuadWriter = new FileQuadWriter(sameasFile)

    configParameters = ConfigParameters(config.properties, otherQuads, sameAsQuads)

    // Setup LocalNode (to pool strings etc.)
    LocalNode.reconfigure(config.properties)
  }

  private def executeMappingPhase(config: IntegrationConfig, quadReaders: Seq[QuadReader]): QuadReader = {
    val r2rReader: QuadReader = mapQuads(config.mappingFile, quadReaders)
    println("Time needed to map data: " + stopWatch.getTimeSpanInSeconds + "s")

    r2rReader
  }

  private def executeLinkingPhase(config: IntegrationConfig, r2rReader: QuadReader): QuadReader = {
    val linkReader = generateLinks(config.linkSpecDir, r2rReader)
    println("Time needed to link data: " + stopWatch.getTimeSpanInSeconds + "s")
    println("Number of links generated by silk: " + linkReader.size)
    linkReader
  }

  private def executeURITranslation(inputQuadReader: QuadReader, linkReader: QuadReader, configProperties: Properties): QuadReader = {
    val integratedReader = URITranslator.translateQuads(inputQuadReader, linkReader, configProperties)

    println("Time needed to translate URIs: " + stopWatch.getTimeSpanInSeconds + "s")
    integratedReader
  }

  /**
   * Loads the dump files.
   */
  def loadDump(sources : Traversable[String]) : Seq[QuadReader] =
  {
    val dumpModule = new DumpModule(new DumpConfig(sources))
    val dumpExecutor = new DumpExecutor

    val quadQueues = for (i <- 1 to dumpModule.tasks.size) yield new BlockingQuadQueue(Consts.DEFAULT_QUAD_QUEUE_CAPACITY)


    for((dumpTask, writer) <- dumpModule.tasks.toList zip quadQueues){
      runInBackground
      {
        dumpExecutor.execute(dumpTask, null, writer)
      }
    }
    quadQueues.toSeq
  }


  /**
   * Transforms the Quads
   */
  private def mapQuads(mappingFile: File, readers: Seq[QuadReader]) : QuadReader = {
    val repository = new Repository(new FileOrURISource(mappingFile))
    val executor = new R2RLocalExecutor
    val config = new R2RConfig(repository)
    val module = new R2RModule(config)

    val entityDescriptions = for(task <- module.tasks) yield task.mapping.entityDescription
    val entityReaders = buildEntities(readers, entityDescriptions.toSeq, configParameters)
    StringPool.reset
    println("Time needed to load dump and build entities for mapping phase: " + stopWatch.getTimeSpanInSeconds + "s")

    val outputFile = File.createTempFile("ldif-mapped-quads", ".bin")
    outputFile.deleteOnExit
    val writer = new FileQuadWriter(outputFile)

    //runInBackground
    {
      for((r2rTask, reader) <- module.tasks.toList zip entityReaders)
        executor.execute(r2rTask, Seq(reader), writer)
    }
    writer.finish
    new FileQuadReader(outputFile)
  }

  /**
   * Generates links.
   */
  private def generateLinks(linkSpecDir : File, reader : QuadReader) : QuadReader =
  {
    val silkModule = SilkModule.load(linkSpecDir)
    val silkExecutor = new SilkLocalExecutor

    val entityDescriptions = silkModule.tasks.toIndexedSeq.map(silkExecutor.input).flatMap{ case StaticEntityFormat(ed) => ed }
    val entityReaders = buildEntities(Seq(reader), entityDescriptions, ConfigParameters(config.properties))
    StringPool.reset
    println("Time needed to build entities for linking phase: " + stopWatch.getTimeSpanInSeconds + "s")

    val outputQueue = new QuadQueue

    //runInBackground
    {
      for((silkTask, readers) <- silkModule.tasks.toList zip entityReaders.grouped(2).toList)
      {
        silkExecutor.execute(silkTask, readers, outputQueue)
      }
    }

    outputQueue
  }

  /**
   * Build Entities.
   */
  private def buildEntities(readers : Seq[QuadReader], entityDescriptions : Seq[EntityDescription], configParameters: ConfigParameters) : Seq[EntityReader] =
  {
    var entityWriters: Seq[EntityWriter] = null
    val entityQueues = entityDescriptions.map(new EntityQueue(_))
    val fileEntityQueues = for(eD <- entityDescriptions) yield {
      val file = File.createTempFile("ldif_entities", ".dat")
      file.deleteOnExit
      new FileEntityWriter(eD, file)
    }

    val inmemory = config.properties.getProperty("entityBuilderType", "in-memory")=="in-memory"

    //Because of memory problems circumvent with FileQuadQueue */
    if(inmemory)
      entityWriters = entityQueues
    else
      entityWriters = fileEntityQueues

    try
    {
      val entityBuilderConfig = new EntityBuilderConfig(entityDescriptions.toIndexedSeq)
      val entityBuilderModule = new EntityBuilderModule(entityBuilderConfig)
      val entityBuilderTask = entityBuilderModule.tasks.head
      val entityBuilderExecutor = new EntityBuilderExecutor(configParameters)

      entityBuilderExecutor.execute(entityBuilderTask, readers, entityWriters)
    } catch {
      case e: Throwable => {
        e.printStackTrace
        sys.exit(2)
      }
    }

    if(inmemory)
      return entityQueues
    else
      return fileEntityQueues.map((entityWriter) => new FileEntityReader(entityWriter.entityDescription, entityWriter.inputFile))

  }

  /**
   * Evaluates an expression in the background.
   */
  private def runInBackground(function : => Unit) {
    val thread = new Thread {
      private val listener: FatalErrorListener = FatalErrorListener

      override def run {
        try {
          function
        } catch {
          case e: Exception => listener.reportError(e)
        }
      }
    }
    thread.start
  }

  //TODO we don't have an output module, yet...
  private def writeOutput(config: IntegrationConfig, reader : QuadReader)    {
    val writer = new FileWriter(config.outputFile)
    var count = 0
    val nqOutput = config.properties.getProperty("outputFormat", "nq").toLowerCase.equals("nq")

    while(reader.hasNext) {
      if(nqOutput)
        writer.write(reader.read().toNQuadFormat + " .\n")
      else
        writer.write(reader.read().toNTripleFormat + " .\n")
      count += 1
    }

    writer.close
    println(count + " Quads written")
  }

  private def writeDebugOutput(phase: String, outputFile: File, reader: QuadReader): QuadReader = {
    val newOutputFile = new File(outputFile.getAbsolutePath + "." + phase)
    copyAndDumpQuadQueue(reader, newOutputFile.getAbsolutePath)
  }

  def copyAndDumpQuadQueue(quadQueue: QuadReader, outputFile: String): QuadReader = {
    val quadOutput = File.createTempFile("ldif-debug-quads", ".bin")
    quadOutput.deleteOnExit
    val writer = new FileQuadWriter(quadOutput)
    val quadWriter = new BufferedWriter(new FileWriter(outputFile))

    while(quadQueue.hasNext) {
      val next = quadQueue.read
      quadWriter.write(next.toNQuadFormat)
      quadWriter.write(" .\n")
      writer.write(next)
    }
    quadWriter.flush()
    quadWriter.close()
    writer.finish
    return new FileQuadReader(writer.outputFile)
  }
}


object IntegrationJob {
  private val log = Logger.getLogger(getClass.getName)

  def main(args : Array[String])
  {
    var debug = false
    val configFile = if(args.length == 0) {
          val configUrl = getClass.getClassLoader.getResource("ldif/local/neurowiki/scheduler-config.xml")
          new File(configUrl.toString.stripPrefix("file:"))
        } else
          new File(args(args.length-1))

    if(args.length>=2 && args(0)=="--debug")
      debug = true

    val integrator = new IntegrationJob(IntegrationConfig.load(configFile), debug)
    integrator.runIntegration
  }
}





